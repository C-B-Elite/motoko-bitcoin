// import Script "../../src/bitcoin/Script";
// import Curves "../../src/ec/Curves";
// import PublicKey "../../src/ecdsa/Publickey";
// import Debug "mo:base/Debug";
// import TestUtils "../TestUtils";
// 
// type P2pkhTestCase = {
//   publicKey : [Nat8];
//   expectedBytes : [Nat8];
// };
// 
// let p2pkhTestCases : [P2pkhTestCase] = [
//   {
//     publicKey =
// [ 0x03, 0x9a, 0xc8, 0xba, 0xc8, 0xf6, 0xd9, 0x16, 0xb8, 0xa8, 0x5b, 0x45,
//   0x8e, 0x08, 0x7e, 0x0c, 0xd0, 0x7e, 0x6a, 0x76, 0xa6, 0xbf, 0xdd, 0xe9,
//   0xbb, 0x76, 0x6b, 0x17, 0x08, 0x6d, 0x9a, 0x5c, 0x8a
// ];
//     expectedBytes = [
//       0x19, 0x76, 0xa9, 0x14, 0x75, 0xb0, 0xc9, 0xfc, 0x78, 0x4b, 0xa2, 0xea,
//       0x08, 0x39, 0xe3, 0xcd, 0xf2, 0x66, 0x94, 0x95, 0xca, 0xc6, 0x70, 0x73,
//       0x88, 0xac
//     ];
//   },
//   {
//     publicKey = [
//       0x03, 0xb9, 0xb5, 0x54, 0xe2, 0x50, 0x22, 0xc2, 0xae, 0x54, 0x9b, 0x0c,
//       0x30, 0xc1, 0x8d, 0xf0, 0xa8, 0xe0, 0x49, 0x52, 0x23, 0xf6, 0x27, 0xae,
//       0x38, 0xdf, 0x09, 0x92, 0xef, 0xb4, 0x77, 0x94, 0x75
//     ];
//     expectedBytes = [
//       0x19, 0x76, 0xa9, 0x14, 0x4b, 0x35, 0x18, 0x22, 0x9b, 0x0d, 0x35, 0x54,
//       0xfe, 0x7c, 0xd3, 0x79, 0x6a, 0xde, 0x63, 0x2a, 0xff, 0x30, 0x69, 0xd8,
//       0x88, 0xac
//     ];
//   },
// ];
// 
// func testP2pkh(testCase : P2pkhTestCase) {
//   switch(PublicKey.decode(#sec1 (testCase.publicKey, Curves.secp256k1))) {
//     case (#ok(pk)) {
//       let actualBytes = Script.toBytes(Script.makeP2PKHScript(pk));
//       assert(testCase.expectedBytes == actualBytes);
//     };
//     case (#err(msg)) {
//       Debug.trap(msg)
//     };
//   };
// };
// 
// 
// let runTest = TestUtils.runTestWithDefaults;
// 
// runTest({
//   title = "Make P2PKH script";
//   fn = testP2pkh;
//   vectors = p2pkhTestCases;
// });
